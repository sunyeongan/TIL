package MST;

import java.util.LinkedList;
import java.util.List;

public class MyGraph {
	
	
	int N;// 그래프 정점 수 
	List<Edge>[] graph;
	
	public MyGraph() {
		
		super();
		
	}
	
	public static int[][] getAdMatrixFromAdjList(List<Edge>[] lst){ //인접리스트 -> 인접행렬 
		
		int [][] arr = new int [lst.length][lst.length];
		
		for(int i = 0; i < lst.length; i++) { //index for
			
			for(int j = 0 ; j < lst[i].size(); j++) { // item for 
				
				if(lst[i].get(j).weight != null ) {
					arr[i][j] = 0;
					
				}else {
					arr[i][j] = lst[i].get(j).weight; //행렬에 가중치 저장 
				}
					
				
			}
			
		}
		return arr;
		
	}
	
	public static List<Edge>[] getAdjListFromAdjMatrix(int[][] mat) { //인접행렬 -> 인접 리스트 
		
		List<Edge>[] adList = new List[mat.length];
		
		for(int i = 0; i < mat.length; i++) {
			
			adList[i] = new LinkedList<>(); //한 행마다 연결리스트 만든다. 
			for(int j = 0 ; j < mat.length; j++) {
				
				if(mat[i][j] != 0) {
					Edge e = new Edge(j, mat[i][j]);  // 인덱스, 가중치 
				}
			}
		}
		return adList;
	
	}
	
	public void print(int[][] mat) { // 인접 2차원 배열(행렬)  출력 
		System.out.println("AdjMatrix : ");
		
		for (int i = 0; i < mat.length; i++) {
			
			for(int j = 0; j < 4; j++) {
				
				System.out.print(mat[i][j]);
				System.out.print(",");
			}
			System.out.println();
		}
		
	}
	
	public void print(List<Edge>[] lst) { //인접리스트 출력 
		
		System.out.println("Graph (AdjList)");
		
		for(int i = 0; i < lst.length; i++) {
			
			System.out.print("[" + i + "]");
			//System.out.print("lst[1].size :" +  lst[1].size());
			for(int j = 0; j < lst[i].size(); j++) {
				System.out.print(" => " + lst[i].get(j).adjvertex + "(" + lst[i].get(j).weight + ")");
			}
			
			System.out.println();
			
		}
	}

}
